// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResidencyApplication.Services.Models.EntityModels;

namespace ResidencyApplication.Services.Migrations
{
    [DbContext(typeof(ResidencyApplicationContext))]
    [Migration("20230201094909_seven")]
    partial class seven
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "Arabic_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("AttachmentId");

                    b.HasIndex("ApplicationNumber");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("ApplicationAttachments");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationAttachmentsLog", b =>
                {
                    b.Property<int>("AttachmentLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("AttachmentLogId");

                    b.ToTable("ApplicationAttachments_Log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationStatus", b =>
                {
                    b.Property<int>("ApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApplicationStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("ApplicationStatusId");

                    b.ToTable("ApplicationStatus");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationType", b =>
                {
                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("ApplicationTypeId");

                    b.ToTable("ApplicationTypes");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.AttachmentDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int?>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedLetterForResidencyRenewal")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CivilIdCopy")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherRelatedDocuments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PassportCopy")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SalaryCertification")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AttachmentDocument");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.AttachmentDocumentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedLetterForResidencyRenewal")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("AttachmentDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("CivilIdCopy")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherRelatedDocuments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PassportCopy")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SalaryCertification")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AttachmentDocument_log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.AttachmentType", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttachmentTypeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.EmployeeView", b =>
                {
                    b.Property<string>("CivilId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CivilIdSerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSapUser")
                        .HasColumnType("bit");

                    b.Property<int?>("JobtypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalityId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasMaxLength(47)
                        .IsUnicode(false)
                        .HasColumnType("varchar(47)")
                        .HasColumnName("statusMessage");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Valid")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("valid");

                    b.ToView("Employee_View");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.FormAction", b =>
                {
                    b.Property<string>("AccessType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("FormAction1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("FormAction")
                        .IsFixedLength(true);

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ToTable("FormAction");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.GeneralSetting", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("EditReturnActivation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ElectronicPaymentActivation")
                        .HasColumnType("bit");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PreventTypeDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("FeatureId");

                    b.ToTable("GeneralSettings");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.JobType", b =>
                {
                    b.Property<int>("IdSergate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSergate")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("Sapid")
                        .HasColumnType("int")
                        .HasColumnName("sapid");

                    b.HasKey("IdSergate");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.Nationality", b =>
                {
                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationalityId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.NonSapUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CivilId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Organization")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RegistrationStatusId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("NonSapUsers");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.NonSapUsersLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CivilId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Organization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserLogId");

                    b.ToTable("NonSapUsers_log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.NotificationSetting", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool?>("AcceptEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptSmsNotification")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("PaymentEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("PaymentSmsNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegistEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegistSmsNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("RejectEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("RejectSmsNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReturnEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReturnSmsNotification")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("NotificationId");

                    b.ToTable("NotificationSetting");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentId");

                    b.Property<int>("SapId")
                        .HasColumnType("int")
                        .HasColumnName("sapId");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.PassportInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<long?>("CivilId")
                        .HasColumnType("bigint")
                        .HasColumnName("CivilID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IssueCountry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("NationalityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ResidencyExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PassportInformation");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.PassportInformationLog", b =>
                {
                    b.Property<int>("PassportInformationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<long?>("CivilId")
                        .HasColumnType("bigint")
                        .HasColumnName("CivilID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IssueCountry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("NationalityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ResidencyExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PassportInformationLogId");

                    b.ToTable("PassportInformation_log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.PersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int?>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeNameArabic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeNameEnglish")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("EmployeeNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("JobtypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PersonalInformation");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("createdByIp");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime")
                        .HasColumnName("expires");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("replacedByToken");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime")
                        .HasColumnName("revoked");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("revokedByIp");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.RegistrationStatus", b =>
                {
                    b.Property<int>("RegistrationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationStatusNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("RegistrationStatusId");

                    b.ToTable("RegistrationStatus");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.Sap", b =>
                {
                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthdate");

                    b.Property<string>("Cardholder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cardholder");

                    b.Property<double>("Civilid")
                        .HasColumnType("float")
                        .HasColumnName("civilid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("department");

                    b.Property<string>("Departmentid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("departmentid");

                    b.Property<string>("Domainusername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("domainusername");

                    b.Property<string>("Dutytime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dutytime");

                    b.Property<string>("Dutytimeid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dutytimeid");

                    b.Property<string>("Employeename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employeename");

                    b.Property<string>("Employeestatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employeestatus");

                    b.Property<int>("Employeestatusid")
                        .HasColumnType("int")
                        .HasColumnName("employeestatusid");

                    b.Property<string>("Employeetype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employeetype");

                    b.Property<string>("Employeetypeid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employeetypeid");

                    b.Property<string>("Filenumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("filenumber");

                    b.Property<string>("Financialgrade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("financialgrade");

                    b.Property<string>("Financialgradearea")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("financialgradearea");

                    b.Property<string>("Financialgradetype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("financialgradetype");

                    b.Property<string>("Fingerprintid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fingerprintid");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("Genderid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("genderid");

                    b.Property<DateTime>("Hireddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("hireddate");

                    b.Property<string>("Islinesupervisorof")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("islinesupervisorof");

                    b.Property<string>("Ismanager")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ismanager");

                    b.Property<string>("Jobtitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("jobtitle");

                    b.Property<int>("Jobtitleid")
                        .HasColumnType("int")
                        .HasColumnName("jobtitleid");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nationality");

                    b.Property<string>("Nationalityid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nationalityid");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("organization");

                    b.Property<int>("Organizationid")
                        .HasColumnType("int")
                        .HasColumnName("organizationid");

                    b.Property<string>("Organizationunitid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("organizationunitid");

                    b.Property<string>("Organizationunitlevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("organizationunitlevel");

                    b.Property<string>("Personelno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("personelno");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("section");

                    b.Property<string>("Sectionid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sectionid");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sector");

                    b.Property<string>("Sectorid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sectorid");

                    b.Property<string>("Subdepartment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subdepartment");

                    b.Property<string>("Subdepartmentid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subdepartmentid");

                    b.Property<string>("Subsection")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subsection");

                    b.Property<string>("Subsectionid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subsectionid");

                    b.Property<string>("Workcenter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("workcenter");

                    b.Property<string>("Workcenterid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("workcenterid");

                    b.Property<string>("Workschedulerule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("workschedulerule");

                    b.Property<string>("Workscheduletime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("workscheduletime");

                    b.ToTable("sap");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.SapUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CivilId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Organization")
                        .HasColumnType("int")
                        .HasColumnName("organization");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SapUsers");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.SapUsersLog", b =>
                {
                    b.Property<int>("SabUsersLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CivilId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SabUsersLogId");

                    b.ToTable("SapUsers_log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CivilIdSerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsSapUser")
                        .HasColumnType("bit");

                    b.Property<int?>("JobtypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalityId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("ResidencyByMoa")
                        .HasColumnType("bit");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserApplication", b =>
                {
                    b.Property<int>("ApplicationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StepNo")
                        .HasColumnType("int");

                    b.Property<int?>("SubmittedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationNumber");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserApplications");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserApplicationStep", b =>
                {
                    b.Property<int>("StepNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StepName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("StepNo");

                    b.ToTable("UserApplicationSteps");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserApplicationsLog", b =>
                {
                    b.Property<int>("ApplicationNumberLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StepNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationNumberLogId");

                    b.ToTable("UserApplications_log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserRoleNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserRoleNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SapId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserTypeId");

                    b.HasIndex(new[] { "UserTypeName" }, "IX_UserTypes")
                        .IsUnique();

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UsersLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CivilIdSerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsSapUser")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalityId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("ResidencyByMoa")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLogId");

                    b.ToTable("Users_log");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.VCountAssignedApplication", b =>
                {
                    b.Property<string>("Employee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotAssigned")
                        .HasColumnType("int");

                    b.ToView("V_CountAssignedApplications");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.VUserApplication", b =>
                {
                    b.Property<int>("ApplicationNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNameArabic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeNameEnglish")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("EmployeeNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ToView("V_UserApplication");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationAttachment", b =>
                {
                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.UserApplication", "ApplicationNumberNavigation")
                        .WithMany("ApplicationAttachments")
                        .HasForeignKey("ApplicationNumber")
                        .HasConstraintName("FK_ApplicationAttachments_UserApplications")
                        .IsRequired();

                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.AttachmentType", "AttachmentType")
                        .WithMany("ApplicationAttachments")
                        .HasForeignKey("AttachmentTypeId")
                        .HasConstraintName("FK_ApplicationAttachments_AttachmentTypes")
                        .IsRequired();

                    b.Navigation("ApplicationNumberNavigation");

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.NonSapUser", b =>
                {
                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.RegistrationStatus", "RegistrationStatus")
                        .WithMany("NonSapUsers")
                        .HasForeignKey("RegistrationStatusId")
                        .HasConstraintName("FK_NonSapUsers_RegistrationStatus")
                        .IsRequired();

                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.User", "User")
                        .WithOne("NonSapUser")
                        .HasForeignKey("ResidencyApplication.Services.Models.EntityModels.NonSapUser", "UserId")
                        .HasConstraintName("FK_NonSapUsers_Users")
                        .IsRequired();

                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.UserType", "UserType")
                        .WithMany("NonSapUsers")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_NonSapUsers_UserTypes")
                        .IsRequired();

                    b.Navigation("RegistrationStatus");

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.SapUser", b =>
                {
                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.User", "User")
                        .WithMany("SapUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SapUsers_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserApplication", b =>
                {
                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.ApplicationStatus", "ApplicationStatus")
                        .WithMany("UserApplications")
                        .HasForeignKey("ApplicationStatusId")
                        .HasConstraintName("FK_UserApplications_ApplicationStatus");

                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.ApplicationType", "ApplicationType")
                        .WithMany("UserApplications")
                        .HasForeignKey("ApplicationTypeId")
                        .HasConstraintName("FK_UserApplications_ApplicationTypes");

                    b.HasOne("ResidencyApplication.Services.Models.EntityModels.User", "User")
                        .WithMany("UserApplications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserApplications_Users");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("ApplicationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationStatus", b =>
                {
                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.ApplicationType", b =>
                {
                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.AttachmentType", b =>
                {
                    b.Navigation("ApplicationAttachments");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.RegistrationStatus", b =>
                {
                    b.Navigation("NonSapUsers");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.User", b =>
                {
                    b.Navigation("NonSapUser");

                    b.Navigation("SapUsers");

                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserApplication", b =>
                {
                    b.Navigation("ApplicationAttachments");
                });

            modelBuilder.Entity("ResidencyApplication.Services.Models.EntityModels.UserType", b =>
                {
                    b.Navigation("NonSapUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
